## Estrategia recomendada para GitHub Actions Runners entre cuentas AWS

Estamos evaluando dos opciones principales para ejecutar **GitHub Actions runners** utilizando **AWS Fargate** en un entorno multi-cuenta:

---

### ‚úÖ Escenario 1: Cuenta centralizada de Runners (Shared Runners)

**Descripci√≥n:** Una cuenta AWS dedicada ejecuta todos los runners, que asumen roles en otras cuentas para realizar tareas.

**Ventajas:**
- Centralizaci√≥n de logs, monitoreo y control de costos
- Ahorro de infraestructura (evita duplicar clusters Fargate)
- Facilidad para gestionar versiones y actualizaciones
- Auditor√≠a y trazabilidad centralizadas
- Infraestructura reutilizable y escalable

**Desventajas:**
- Configuraci√≥n IAM m√°s compleja (uso de `sts:AssumeRole` y pol√≠ticas de confianza)
- Necesidad de aislamiento l√≥gico por entorno (dev, staging, prod)
- Riesgo de permisos excesivos si no se segmenta bien

**Recomendado si:**
- Se tiene una organizaci√≥n multi-cuenta bien estructurada (ej: `org-root`, `dev`, `prod`, `shared-services`)
- Se usa autenticaci√≥n OIDC con GitHub Actions y roles asumidos
- Se busca eficiencia, reutilizaci√≥n y administraci√≥n centralizada

---

### ‚úÖ Escenario 2: Runners distribuidos por cuenta (aislados)

**Descripci√≥n:** Cada cuenta AWS contiene su propio conjunto de runners, gestionados localmente.

**Ventajas:**
- Aislamiento completo de ambientes (seguridad, costos, riesgos)
- IAM m√°s simple (sin necesidad de asumir roles entre cuentas)
- Ideal para cuentas con autonom√≠a fuerte por equipo o proyecto

**Desventajas:**
- Mayor costo y duplicaci√≥n de infraestructura
- Dificultad para estandarizar y actualizar versiones
- Gesti√≥n de monitoreo/logs m√°s compleja

**Recomendado si:**
- Cada cuenta es operada por equipos distintos
- Existen requisitos estrictos de seguridad o cumplimiento
- Se prioriza simplicidad de configuraci√≥n sobre eficiencia

---

### üîÑ Recomendaci√≥n final para OCA

Para el caso de OCA, con estructura DevOps centralizada y m√∫ltiples cuentas, **se recomienda una cuenta central de runners** (por ejemplo: `oca-runners`) utilizando **Fargate + OIDC con GitHub Actions**.

**Complementar con:**
- Repositorio de workflows reutilizables
- Modularizaci√≥n con `workflow_call`
- Roles OIDC separados por entorno (dev, staging, prod)
- Logging y m√©tricas centralizados (CloudWatch)

---

Si necesitas ejemplos de pol√≠ticas IAM, workflows base o templates de runners con escalamiento autom√°tico, puedo ayudarte con eso.